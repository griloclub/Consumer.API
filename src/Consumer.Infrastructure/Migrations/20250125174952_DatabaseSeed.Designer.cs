// <auto-generated />
using Consumer.Infrastructure.Data;
using FirebirdSql.EntityFrameworkCore.Firebird.Metadata;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Consumer.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250125174952_DatabaseSeed")]
    partial class DatabaseSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 31);

            modelBuilder.Entity("Consumer.Domain.Entities.Addition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ItemId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Additions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ItemId = 1L,
                            Name = "Queijo Extra",
                            Price = 8.90m
                        },
                        new
                        {
                            Id = 2L,
                            ItemId = 1L,
                            Name = "Oregano Extra",
                            Price = 2.90m
                        },
                        new
                        {
                            Id = 3L,
                            ItemId = 4L,
                            Name = "Bacon",
                            Price = 7.90m
                        },
                        new
                        {
                            Id = 4L,
                            ItemId = 4L,
                            Name = "Cebola Caramelizada",
                            Price = 5.90m
                        },
                        new
                        {
                            Id = 5L,
                            ItemId = 7L,
                            Name = "Cream Cheese",
                            Price = 6.90m
                        },
                        new
                        {
                            Id = 6L,
                            ItemId = 9L,
                            Name = "Azeitonas",
                            Price = 3.90m
                        });
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<string>("Observation")
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TableId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Pizza Margherita",
                            Observation = "Sem cebola",
                            Price = 45.90m,
                            Quantity = 2,
                            TableId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Cerveja Pilsen 600ml",
                            Price = 12.90m,
                            Quantity = 2,
                            TableId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Bruschetta",
                            Price = 28.90m,
                            Quantity = 1,
                            TableId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Pizza Calabresa",
                            Observation = "Borda recheada",
                            Price = 42.90m,
                            Quantity = 1,
                            TableId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Coca-Cola 350ml",
                            Price = 7.90m,
                            Quantity = 3,
                            TableId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Salada Caesar",
                            Price = 34.90m,
                            Quantity = 1,
                            TableId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Pizza Quatro Queijos",
                            Price = 48.90m,
                            Quantity = 2,
                            TableId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Chopp 500ml",
                            Price = 15.90m,
                            Quantity = 4,
                            TableId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Pizza Portuguesa",
                            Price = 46.90m,
                            Quantity = 1,
                            TableId = 4L
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Suco Natural",
                            Price = 12.90m,
                            Quantity = 2,
                            TableId = 4L
                        });
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Option", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ItemId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ItemId = 1L,
                            Name = "Borda Catupiry"
                        },
                        new
                        {
                            Id = 2L,
                            ItemId = 4L,
                            Name = "Massa Integral"
                        },
                        new
                        {
                            Id = 3L,
                            ItemId = 7L,
                            Name = "Borda Cheddar"
                        },
                        new
                        {
                            Id = 4L,
                            ItemId = 9L,
                            Name = "Sem Ovo"
                        },
                        new
                        {
                            Id = 5L,
                            ItemId = 5L,
                            Name = "Sem Gelo"
                        },
                        new
                        {
                            Id = 6L,
                            ItemId = 10L,
                            Name = "Com Gengibre"
                        });
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Table", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OpenedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ClientName = "João Oliveira",                            
                            Number = 1,
                            OpenedAt = new DateTime(2025, 1, 25, 12, 49, 52, 36, DateTimeKind.Local).AddTicks(1342),
                            Quantity = 2,
                            Status = 1,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            ClientName = "Maria Silva",                            
                            Number = 2,
                            OpenedAt = new DateTime(2025, 1, 25, 13, 49, 52, 36, DateTimeKind.Local).AddTicks(1369),
                            Quantity = 3,
                            Status = 1,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            ClientName = "Pedro Santos",                            
                            Number = 3,
                            OpenedAt = new DateTime(2025, 1, 25, 14, 4, 52, 36, DateTimeKind.Local).AddTicks(1370),
                            Quantity = 4,
                            Status = 1,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            ClientName = "Ana Costa",
                            Number = 4,
                            OpenedAt = new DateTime(2025, 1, 25, 14, 19, 52, 36, DateTimeKind.Local).AddTicks(1372),
                            Quantity = 2,
                            Status = 1,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            ClientName = "Lucas Ferreira",
                            Number = 5,
                            OpenedAt = new DateTime(2025, 1, 25, 11, 49, 52, 36, DateTimeKind.Local).AddTicks(1373),
                            Quantity = 3,
                            Status = 1,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            ClientName = "Carla Souza",
                            ClosedAt = new DateTime(2025, 1, 24, 16, 49, 52, 36, DateTimeKind.Local).AddTicks(1379),
                            Number = 6,
                            OpenedAt = new DateTime(2025, 1, 24, 14, 49, 52, 36, DateTimeKind.Local).AddTicks(1374),
                            Quantity = 2,
                            Status = 0,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            ClientName = "Roberto Lima",
                            Number = 7,
                            OpenedAt = new DateTime(2025, 1, 25, 10, 49, 52, 36, DateTimeKind.Local).AddTicks(1381),
                            Quantity = 4,
                            Status = 1,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            ClientName = "Fernanda Santos",
                            Number = 8,
                            OpenedAt = new DateTime(2025, 1, 25, 12, 49, 52, 36, DateTimeKind.Local).AddTicks(1449),
                            Quantity = 2,
                            Status = 1,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            ClientName = "Gabriel Costa",
                            Number = 9,
                            OpenedAt = new DateTime(2025, 1, 25, 13, 49, 52, 36, DateTimeKind.Local).AddTicks(1451),
                            Quantity = 3,
                            Status = 1,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 10L,
                            ClientName = "Julia Oliveira",
                            Number = 10,
                            OpenedAt = new DateTime(2025, 1, 25, 14, 19, 52, 36, DateTimeKind.Local).AddTicks(1452),
                            Quantity = 2,
                            Status = 1,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            ClientName = "Marcelo Silva",
                            ClosedAt = new DateTime(2025, 1, 24, 17, 49, 52, 36, DateTimeKind.Local).AddTicks(1455),
                            Number = 11,
                            OpenedAt = new DateTime(2025, 1, 24, 14, 49, 52, 36, DateTimeKind.Local).AddTicks(1454),
                            Quantity = 4,
                            Status = 0,
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("Consumer.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Password = "$2a$11$qoD5KeQADNrDpuCD4IafQO0WCwoWWpILUMPWYA/weyz4SRjnhcDQ6",
                            UserId = new Guid("9c55d12b-d7c9-4a91-84c0-9e334eff7ef5"),
                            Username = "user01"
                        },
                        new
                        {
                            Id = 2L,
                            Password = "$2a$11$CcNdc6ziFiOisqosELhKTOG/Gx/ur4JDkamkyOoooimnKyN0lkPym",
                            UserId = new Guid("55c003eb-ee85-4b17-a360-ff065e3bdff3"),
                            Username = "user02"
                        },
                        new
                        {
                            Id = 3L,
                            Password = "$2a$11$FTiuRkcwqTTIRI.twZPk9.nk2yfSXBXZMGRgTn5tTQB3i/iQ2KoS2",
                            UserId = new Guid("ca00fdcd-10fc-49bc-beb4-5f15a051cc93"),
                            Username = "user03"
                        });
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Addition", b =>
                {
                    b.HasOne("Consumer.Domain.Entities.Item", null)
                        .WithMany("Additions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Item", b =>
                {
                    b.HasOne("Consumer.Domain.Entities.Table", null)
                        .WithMany("Items")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Option", b =>
                {
                    b.HasOne("Consumer.Domain.Entities.Item", null)
                        .WithMany("Options")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Table", b =>
                {
                    b.HasOne("Consumer.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Consumer.Domain.Entities.Values", "Values", b1 =>
                        {
                            b1.Property<long>("TableId")
                                .HasColumnType("BIGINT");

                            b1.Property<decimal>("ServiceFee")
                                .HasColumnType("DECIMAL(18,2)");

                            b1.Property<decimal>("Total")
                                .HasColumnType("DECIMAL(18,2)");

                            b1.Property<decimal>("TotalPayment")
                                .HasColumnType("DECIMAL(18,2)");

                            b1.HasKey("TableId");

                            b1.ToTable("Tables");

                            b1.WithOwner()
                                .HasForeignKey("TableId");

                            b1.HasData(
                                new
                                {
                                    TableId = 1L,
                                    ServiceFee = 15.68m,
                                    Total = 156.80m,
                                    TotalPayment = 172.48m
                                },
                                new
                                {
                                    TableId = 2L,
                                    ServiceFee = 23.45m,
                                    Total = 234.50m,
                                    TotalPayment = 257.95m
                                },
                                new
                                {
                                    TableId = 3L,
                                    ServiceFee = 34.56m,
                                    Total = 345.60m,
                                    TotalPayment = 380.16m
                                },
                                new
                                {
                                    TableId = 4L,
                                    ServiceFee = 17.89m,
                                    Total = 178.90m,
                                    TotalPayment = 196.79m
                                },
                                new
                                {
                                    TableId = 5L,
                                    ServiceFee = 26.78m,
                                    Total = 267.80m,
                                    TotalPayment = 294.58m
                                },
                                new
                                {
                                    TableId = 6L,
                                    ServiceFee = 18.99m,
                                    Total = 189.90m,
                                    TotalPayment = 208.89m
                                },
                                new
                                {
                                    TableId = 7L,
                                    ServiceFee = 45.67m,
                                    Total = 456.70m,
                                    TotalPayment = 502.37m
                                },
                                new
                                {
                                    TableId = 8L,
                                    ServiceFee = 23.45m,
                                    Total = 234.50m,
                                    TotalPayment = 257.95m
                                },
                                new
                                {
                                    TableId = 9L,
                                    ServiceFee = 34.56m,
                                    Total = 345.60m,
                                    TotalPayment = 380.16m
                                },
                                new
                                {
                                    TableId = 10L,
                                    ServiceFee = 17.89m,
                                    Total = 178.90m,
                                    TotalPayment = 196.79m
                                },
                                new
                                {
                                    TableId = 11L,
                                    ServiceFee = 56.78m,
                                    Total = 567.80m,
                                    TotalPayment = 624.58m
                                });
                        });

                    b.Navigation("User");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Item", b =>
                {
                    b.Navigation("Additions");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Table", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
