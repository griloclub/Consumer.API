// <auto-generated />
using System;
using Consumer.Infrastructure.Data;
using FirebirdSql.EntityFrameworkCore.Firebird.Metadata;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Consumer.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250125173502_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 31);

            modelBuilder.Entity("Consumer.Domain.Entities.Addition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ItemId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Additions");
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<string>("Observation")
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TableId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Option", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ItemId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Table", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OpenedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Consumer.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Addition", b =>
                {
                    b.HasOne("Consumer.Domain.Entities.Item", null)
                        .WithMany("Additions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Item", b =>
                {
                    b.HasOne("Consumer.Domain.Entities.Table", null)
                        .WithMany("Items")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Option", b =>
                {
                    b.HasOne("Consumer.Domain.Entities.Item", null)
                        .WithMany("Options")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Table", b =>
                {
                    b.HasOne("Consumer.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Consumer.Domain.Entities.Values", "Values", b1 =>
                        {
                            b1.Property<long>("TableId")
                                .HasColumnType("BIGINT");

                            b1.Property<decimal>("ServiceFee")
                                .HasColumnType("DECIMAL(18,2)");

                            b1.Property<decimal>("Total")
                                .HasColumnType("DECIMAL(18,2)");

                            b1.Property<decimal>("TotalPayment")
                                .HasColumnType("DECIMAL(18,2)");

                            b1.HasKey("TableId");

                            b1.ToTable("Tables");

                            b1.WithOwner()
                                .HasForeignKey("TableId");
                        });

                    b.Navigation("User");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Item", b =>
                {
                    b.Navigation("Additions");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Consumer.Domain.Entities.Table", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
